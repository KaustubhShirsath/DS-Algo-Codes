#include<bits/stdc++.h>
using namespace std;
vector<int> sums;
int n;
int missing(vector<int> nums){                          // TC = O(n);
    int n = nums.size();
    set<int> s;
    for(int i = 0; i < n; i++) s.insert(nums[i]);
    nums.clear();
    for(int x: s) nums.push_back(x);
    for(int i = 0; i < n; i++) if(nums[i] <= 0) nums[i] = n+1;
    for(int i = 0; i < n; i++) if(abs(nums[i]) <= n && nums[abs(nums[i])-1] > 0) nums[abs(nums[i])-1] *= -1;
    for(int i = 0; i < n; i++) if(nums[i] > 0) return i+1;
    return n+1;
}

void solve(vector<int> v){                                  // TC = O(n*2^n);
   for(int masks = 0; masks <(1<<n); masks++){
       int sum = 0;
       for(int j = 0; j < n; j++){
           if((masks>>j) & 1) sum += v[j];
       }
       sums.push_back(sum);
   }
   return;
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t;cin>>t;
    while(t--){
        cin>>n;
    	vector<int> arr(n);
    	for(int i = 0; i < n; i++) cin>>arr[i];
    	solve(arr);
    	for(int x: sums) cout<<x<<" ";
    	cout<<endl;
    	cout<<"first missing sum = "<<missing(sums)<<endl;
    	sums.clear();
    }
    return 0;
}