/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*n.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"
Make sure the returned list of strings are sorted.
*/
vector<string> ans;
string curr = "";
int n;
void rec(int open, int close) {
    if (open == close && open == n) {
        ans.push_back(curr);
        return;
    }
    if (open > n || close > n)  return;
    if (open < n) {
        curr.push_back('(');
        rec(open + 1, close);
        curr.pop_back();
    }
    if (close < open) {
        curr.push_back(')');
        rec(open, close + 1);
        curr.pop_back();
    }
}
vector<string> Solution::generateParenthesis(int A) {
    n = A;
    int open = 0, close = 0; 
    ans.clear();curr.clear();
    rec(open, close);
    return ans;
}
