/*
Given an array arr[] of N numbers. 
We can merge two adjacent numbers into one and the cost of merging
the two numbers is equal to the sum of the two values. 
The task is to find the total minimum cost of merging all the numbers.
*/
#include <bits/stdc++.h>
using namespace std;
int mergeTwoarr(vector<int>& arr){
	int n = arr.size();
	if (arr.size() == 0)return 0;
	vector<int> prefixSum(n + 1, 0);
	for(int i = 1; i <= n; i++) prefixSum[i] = prefixSum[i - 1]+ arr[i - 1];
	vector<vector<int> > dp(n + 1,vector<int>(n + 1));
	for(int i = 1; i <= n; i++)dp[i][i] = 0;
	for(int len = 2; len <= n; len++) {
		for(int i = 1; i <= n - len + 1; i++) {
			int j = i + len - 1, sum = prefixSum[j]- prefixSum[i - 1];
			dp[i][j] = INT_MAX;
			for(int k = i; k < j; k++) {
				dp[i][j]= min(dp[i][j],dp[i][k]+ dp[k + 1][j]+ sum);
			}
		}
	}
	return dp[1][n];
}

int main(){
	vector<int> arr1 = { 6, 4, 4, 6 };
	cout << mergeTwoarr(arr1)<< endl;
	return 0;
}
