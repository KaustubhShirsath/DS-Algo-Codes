#include<bits/stdc++.h>
using namespace std;
struct node{
    int val;
    struct node *left, *right;
    node(int k){val = k; left = NULL; right = NULL;}
};

void MorrisOrderTraversal(node* curr){
    while(curr != NULL){
        if(curr->left == NULL){
            cout<<curr->val<<" ";
            curr = curr->right;
        }
        else{
            node* temp = curr->left;
            while(temp->right != NULL && temp->right != curr) temp = temp->right;
            if(temp->right == NULL){
                temp->right = curr;
                curr = curr->left;
            }
            if(temp->right == curr){
                temp->right = NULL;
                cout<<curr->val<<" ";
                curr = curr->right;
            }
        }
    }
}

void inorder(node* root){
    if(!root) return;
    inorder(root->left);
    cout<<root->val<<" ";
    inorder(root->right);
}

void preorder(node* root){
    if(!root) return;
    cout<<root->val<<" ";
    preorder(root->left);
    preorder(root->right);
}

void postorder(node* root){
    if(!root) return;
    postorder(root->left);
    postorder(root->right);
    cout<<root->val<<" ";
}

int main(){
 
    /* Constructed binary tree is
            1
          /   \
         2     3
       /   \
      4     5
  */
    struct node* root = new node(1);
    root->left = new node(2);
    root->right = new node(3);
    root->left->left = new node(4);
    root->left->right = new node(5);
    cout<<"INORDER = ";inorder(root);
    cout<<endl;
    cout<<"MorrisOrderTraversal(inorder) = ";MorrisOrderTraversal(root);
    cout<<endl;
    cout<<"PREORDER = ";preorder(root);
    cout<<endl;
    cout<<"POSTORDER = ";postorder(root);
    cout<<endl;
    return 0;
}
