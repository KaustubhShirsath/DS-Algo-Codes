/*
There are n piles of stones arranged in a row. The ith pile has stones[i] stones.
A move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.
Return the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.
*/

//  array = 3 5 1 2 6   // k = 3
//   {0 1 2 3 4} // dp matrix(i -> j) cost of merging
// 0| 0 0 9 8 8->min(8,9,9,8)
// 1| 0 0 0 8 8
// 2| 0 0 0 0 9
// 3| 0 0 0 0 0
// 4| 0 0 0 0 0 

// k :items = 1 merge
// k + (k-1) :items = 2 merges
// k + (k-1) + (k-1) :items = 3 merges    (n-k)%(k-1) = INTEGER

class Solution {
public:
    int mergeStones(vector<int>& stones, int K) {
        int n = stones.size();
        if((n-K) % (K-1) != 0) return -1;
        vector<int> prefixSum(n+1);
        prefixSum[0] = 0;
        for(int i=0; i<n; i++) prefixSum[i+1] = prefixSum[i] + stones[i];
        vector<vector<int>> dp(n,vector<int>(n,0));
        
        for(int len = K-1; len < n; len++){
            for(int x = 0, y = x + len; x < n && y < n; x++, y++){
               if(len == K-1) dp[x][y] = prefixSum[y+1] - prefixSum[x];
                else{
                    dp[x][y] = INT_MAX;
                    for(int mid=x; mid<y; mid+=K-1)
                        dp[x][y] = min(dp[x][y], dp[x][mid] + dp[mid+1][y]);
                    if(len % (K-1) == 0) dp[x][y] += prefixSum[y+1] - prefixSum[x];
                }
            }
        }
        return dp[0][n-1] !=INT_MAX ? dp[0][n-1] : -1;
    }
};