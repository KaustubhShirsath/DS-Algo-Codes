#include<bits/stdc++.h>using namespace std;int n;int p[100100];int h[100100];int b,k;int dp[101][1001][101];int rec(int level,int spent,int taken){	if(level==n){		return 0;	}	if(dp[level][spent][taken]!=-1){		return dp[level][spent][taken];	}	// choice 1: skip this item	ans = rec(level+1,spent,taken);	// choice 2: take this item	if(spent+p[level]<=b && taken+1<=k)		ans = max(ans, rec(level+1,spent+p[level],taken+1)+h[level]);	dp[level][spent][taken]=ans;	return ans;}void solve(){	cin>>n;	for(int i=0;i<n;i++){		cin>>p[i]>>h[i];	}	memset(dp,-1,sizeof(dp));	cin>>b>>k;	cout<<rec(0,0,0)<<endl;}	signed main(){	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);	//int _t;cin>>_t;while(_t--)	solve();}